#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BSG –ê–Ω–∞–ª–∏—Ç–∏–∫ - Telegram –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö workshop_data_1.db.
"""
import logging
import sqlite3
import re
from collections import defaultdict
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
from user_registration import (
    is_user_registered,
    get_user_full_name,
    handle_full_name_input,
    cancel_registration,
    WAITING_FOR_FULL_NAME
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω)
TOKEN = "8414355250:AAGyGpcYMIGgeR6hKAF35niRT0HE06zyke4"

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–µ—Ä–≤—ã–º –±–æ—Ç–æ–º
DB_PATH = "/home/viktor/Data-entry/workshop_data_1.db"


# –ò–º—è —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–∫–∞ —É–ø–∞–∫–æ–≤–∫–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞)
PACKAGING_TABLE_NAME = "–£—á–∞—Å—Ç–æ–∫_—É–ø–∞–∫–æ–≤–∫–∏"

# === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ===

def get_table_names():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ç–∞–±–ª–∏—Ü –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = [row[0] for row in cursor.fetchall()]
        conn.close()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        return tables
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
        return []

def search_by_order(order_number: str):
    """
    –ò—â–µ—Ç –≤—Å–µ –∏–∑–¥–µ–ª–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: {—É—á–∞—Å—Ç–æ–∫: [(qr_data, telegram_id, creation_date, modification_date), ...]}
    """
    results = defaultdict(list)
    tables = get_table_names()
    if not tables:
        logger.warning("–°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –ø—É—Å—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
        return results
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ qr_data, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
    pattern = f"{order_number}%"
    
    for table in tables:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        if table in ['users', 'user_creation_dates']:
            continue
            
        try:
            cursor.execute(f'''
                SELECT qr_data, telegram_id, creation_date, modification_date 
                FROM "{table}" 
                WHERE qr_data LIKE ?
            ''', (pattern,))
            rows = cursor.fetchall()
            if rows:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                readable_workshop = table.replace("_", " ")
                results[readable_workshop].extend(rows)
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Ç–∞–±–ª–∏—Ü–µ '{table}': {e}")
    
    conn.close()
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –∑–∞–∫–∞–∑—É {order_number}: –Ω–∞–π–¥–µ–Ω–æ –≤ {len(results)} —É—á–∞—Å—Ç–∫–∞—Ö")
    return results

def search_by_item(item_number: str):
    """
    –ò—â–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ –ø–æ –µ–≥–æ –ø–æ–ª–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫: [(—É—á–∞—Å—Ç–æ–∫, qr_data, telegram_id, creation_date, modification_date)]
    """
    results = []
    tables = get_table_names()
    if not tables:
        logger.warning("–°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –ø—É—Å—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
        return results
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    for table in tables:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        if table in ['users', 'user_creation_dates']:
            continue
            
        try:
            cursor.execute(f'''
                SELECT qr_data, telegram_id, creation_date, modification_date 
                FROM "{table}" 
                WHERE qr_data LIKE ?
            ''', (f'{item_number}%',))
            rows = cursor.fetchall()
            if rows:
                readable_workshop = table.replace("_", " ")
                for row in rows:
                    results.append((readable_workshop, row[0], row[1], row[2], row[3]))
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Ç–∞–±–ª–∏—Ü–µ '{table}': {e}")
    
    conn.close()
    logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –∏–∑–¥–µ–ª–∏—é {item_number}: –Ω–∞–π–¥–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π")
    return results

def search_packaged_items(order_number: str):
    """
    –ò—â–µ—Ç –≤—Å–µ –∏–∑–¥–µ–ª–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ —á–µ—Ä–µ–∑ —É—á–∞—Å—Ç–æ–∫ —É–ø–∞–∫–æ–≤–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫: [(qr_data, telegram_id, creation_date, modification_date)]
    """
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ qr_data, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
        pattern = f"{order_number}%"
        cursor.execute(f'''
            SELECT qr_data, telegram_id, creation_date, modification_date 
            FROM "{PACKAGING_TABLE_NAME}" 
            WHERE qr_data LIKE ?
        ''', (pattern,))
        rows = cursor.fetchall()
        conn.close()
        logger.info(f"–ü–æ–∏—Å–∫ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –ø–æ –∑–∞–∫–∞–∑—É {order_number}: –Ω–∞–π–¥–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π")
        return rows
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –ø–æ –∑–∞–∫–∞–∑—É {order_number}: {e}")
        return []

def format_table_data(data, headers):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞.
    """
    if not data:
        return ""
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
    col_widths = [len(str(header)) for header in headers]
    for row in data:
        for i, cell in enumerate(row):
            col_widths[i] = max(col_widths[i], len(str(cell)))
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    format_str = " ‚îÇ ".join(["{:<" + str(width) + "}" for width in col_widths])
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    table_lines = []
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    table_lines.append(format_str.format(*headers))
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    separator = "‚îÄ‚îº‚îÄ".join(["‚îÄ" * width for width in col_widths])
    table_lines.append(separator)
    # –î–∞–Ω–Ω—ã–µ
    for row in data:
        table_lines.append(format_str.format(*[str(cell) for cell in row]))
    
    return "```\n" + "\n".join(table_lines) + "\n```"

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."""
    telegram_id = update.effective_user.id
    user_name = update.effective_user.full_name or update.effective_user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if is_user_registered(telegram_id):
        full_name = get_user_full_name(telegram_id)
        welcome_text = (
            f"ü§ñ *BSG –ê–Ω–∞–ª–∏—Ç–∏–∫*, {full_name}!\n\n"
            "üîç –Ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö –∏ –∏–∑–¥–µ–ª–∏—è—Ö.\n\n"
            "üì§ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
            "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞* (–Ω–∞–ø—Ä–∏–º–µ—Ä, `152/1` –∏–ª–∏ `123`)\n"
            "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ *–Ω–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è* (–Ω–∞–ø—Ä–∏–º–µ—Ä, `152/1.28` –∏–ª–∏ `123.45`)\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /packaged\\_items `–Ω–æ–º–µ—Ä_–∑–∞–∫–∞–∑–∞` –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏\n"
        )
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
        return ConversationHandler.END
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        context.user_data['telegram_id'] = telegram_id
        registration_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–§.–ò.–û.* –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á`\n\n"
            "–ò–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏:\n"
            "`–ò–≤–∞–Ω–æ–≤ –ò.–ò.`"
        )
        await update.message.reply_text(registration_text, parse_mode='Markdown')
        return WAITING_FOR_FULL_NAME

# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /help."""
    telegram_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if not is_user_registered(telegram_id):
        await update.message.reply_text(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return
    
    help_text = (
        "üìñ *–°–ø—Ä–∞–≤–∫–∞ BSG –ê–Ω–∞–ª–∏—Ç–∏–∫*\n\n"
        "üîé *–ü–æ–∏—Å–∫ –ø–æ –∑–∞–∫–∞–∑—É:*\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `152/1`, `123`).\n"
        "–ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –∏–∑–¥–µ–ª–∏—è –∏–∑ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ –≤—Å–µ–º —É—á–∞—Å—Ç–∫–∞–º.\n\n"
        "üîé *–ü–æ–∏—Å–∫ –ø–æ –∏–∑–¥–µ–ª–∏—é:*\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `152/1.28`, `123.45`).\n"
        "–ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç, –Ω–∞ –∫–∞–∫–∏—Ö —É—á–∞—Å—Ç–∫–∞—Ö —ç—Ç–æ –∏–∑–¥–µ–ª–∏–µ –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ.\n\n"
        "üì¶ *–ü–æ–∏—Å–∫ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π:*\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/packaged_items –Ω–æ–º–µ—Ä_–∑–∞–∫–∞–∑–∞` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/packaged_items 152/1`).\n"
        "–ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –∏–∑–¥–µ–ª–∏—è –∏–∑ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞, –ø—Ä–æ—à–µ–¥—à–∏–µ —á–µ—Ä–µ–∑ —É—á–∞—Å—Ç–æ–∫ —É–ø–∞–∫–æ–≤–∫–∏.\n\n"
        "‚ùå *–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:*\n"
        "–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç: _\"–ù–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –≤ —Ä–∞–±–æ—Ç—É\"_."
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def packaged_items_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–¥–µ–ª–∏–π –∏–∑ –∑–∞–∫–∞–∑–∞, –ø—Ä–æ—à–µ–¥—à–∏—Ö —á–µ—Ä–µ–∑ —É—á–∞—Å—Ç–æ–∫ —É–ø–∞–∫–æ–≤–∫–∏."""
    telegram_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if not is_user_registered(telegram_id):
        await update.message.reply_text(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
    if not context.args:
        await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: `/packaged_items 152/1` –∏–ª–∏ `/packaged_items 123`",
            parse_mode='Markdown'
        )
        return
    
    order_number = context.args[0].strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞: –¥–æ–ø—É—Å–∫–∞–µ–º —Ü–∏—Ñ—Ä—ã, —Å–ª—ç—à–∏ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    if not re.match(r'^[\d/_]+$', order_number):
        await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (—Ü–∏—Ñ—Ä—ã, —Å–ª—ç—à–∏ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è).\n"
            "–ü—Ä–∏–º–µ—Ä: `/packaged_items 152/1` –∏–ª–∏ `/packaged_items 123`",
            parse_mode='Markdown'
        )
        return
    
    logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π –ø–æ –∑–∞–∫–∞–∑—É: {order_number}")
    
    try:
        packaged_results = search_packaged_items(order_number)
        
        if not packaged_results:
            await update.message.reply_text("üì≠ _–ù–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –≤ —Ä–∞–±–æ—Ç—É –∏–ª–∏ –Ω–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π_", parse_mode='Markdown')
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —É–ø–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π
        headers = ["–ò–∑–¥–µ–ª–∏–µ", "–§–∞–º–∏–ª–∏—è", "–ó–∞–ø—É—â–µ–Ω–æ", "–ò–∑–º–µ–Ω–µ–Ω–æ"]
        table_data = []
        for qr_data, telegram_id, creation_date, modification_date in packaged_results:
            # –ü–æ–ª—É—á–∞–µ–º –§.–ò.–û. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            full_name = get_user_full_name(telegram_id)
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            creation_short = creation_date.split()[0] if creation_date else "-"
            modification_short = modification_date.split()[0] if modification_date else "-"
            table_data.append([qr_data, full_name, creation_short, modification_short])
        
        table_str = format_table_data(table_data, headers)
        response = f"üì¶ *–£–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è –∑–∞–∫–∞–∑–∞ {order_number}:*\n\n{table_str}"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ '/packaged_items {order_number}': {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='Markdown'
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    telegram_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if not is_user_registered(telegram_id):
        await update.message.reply_text(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return
    
    user_input = update.message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_input}'")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–æ–¥–∞: –¥–æ–ø—É—Å–∫–∞–µ–º —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, —Å–ª—ç—à–∏ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    if not re.match(r'^[\d./_]+$', user_input):
        await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `152/1`, `123`) –∏–ª–∏ –∏–∑–¥–µ–ª–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `152/1.28`, `123.45`).",
            parse_mode='Markdown'
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –∑–∞–∫–∞–∑ –∏–ª–∏ –∏–∑–¥–µ–ª–∏–µ
    # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫—É –∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã - —ç—Ç–æ –∏–∑–¥–µ–ª–∏–µ
    is_item_search = '.' in user_input and re.search(r'\.(\d+)', user_input)
    
    try:
        if is_item_search:
            # === –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∏–∑–¥–µ–ª–∏—è ===
            logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ –∏–∑–¥–µ–ª–∏—é: {user_input}")
            item_results = search_by_item(user_input)
            if not item_results:
                await update.message.reply_text("üì≠ _–ù–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –≤ —Ä–∞–±–æ—Ç—É_", parse_mode='Markdown')
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∏–∑–¥–µ–ª–∏—é
            headers = ["–£—á–∞—Å—Ç–æ–∫", "–§–∞–º–∏–ª–∏—è", "–ó–∞–ø—É—â–µ–Ω–æ", "–ò–∑–º–µ–Ω–µ–Ω–æ"]
            table_data = []
            for workshop, qr_data, telegram_id, creation_date, modification_date in item_results:
                # –ü–æ–ª—É—á–∞–µ–º –§.–ò.–û. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                full_name = get_user_full_name(telegram_id)
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                creation_short = creation_date.split()[0] if creation_date else "-"
                modification_short = modification_date.split()[0] if modification_date else "-"
                table_data.append([workshop, full_name, creation_short, modification_short])
            
            table_str = format_table_data(table_data, headers)
            response = f"üîß *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–¥–µ–ª–∏–∏ {user_input}:*\n\n{table_str}"
        else:
            # === –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ ===
            logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ –∑–∞–∫–∞–∑—É: {user_input}")
            order_results = search_by_order(user_input)
            if not order_results:
                await update.message.reply_text("üì≠ _–ù–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –≤ —Ä–∞–±–æ—Ç—É_", parse_mode='Markdown')
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
            all_items = set()
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–∫–∞
            response = f"üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É {user_input}:*\n\n"
            
            for workshop, items in order_results.items():
                response += f"üìç *{workshop}*\n"
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏–∑–¥–µ–ª–∏–π –Ω–∞ —ç—Ç–æ–º —É—á–∞—Å—Ç–∫–µ
                headers = ["–ò–∑–¥–µ–ª–∏–µ", "–§–∞–º–∏–ª–∏—è", "–ó–∞–ø—É—â–µ–Ω–æ", "–ò–∑–º–µ–Ω–µ–Ω–æ"]
                table_data = []
                for qr_data, telegram_id, creation_date, modification_date in items:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–¥–µ–ª–∏–µ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                    all_items.add(qr_data)
                    # –ü–æ–ª—É—á–∞–µ–º –§.–ò.–û. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    full_name = get_user_full_name(telegram_id)
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                    creation_short = creation_date.split()[0] if creation_date else "-"
                    modification_short = modification_date.split()[0] if modification_date else "-"
                    table_data.append([qr_data, full_name, creation_short, modification_short])
                
                table_str = format_table_data(table_data, headers)
                response += f"{table_str}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–¥–µ–ª–∏–π –≤ –∫–æ–Ω—Ü–µ
            if all_items:
                sorted_items = sorted(all_items)
                items_list = "\n".join([f"‚Ä¢ `{item}`" for item in sorted_items])
                response += f"*üìã –í—Å–µ –∏–∑–¥–µ–ª–∏—è –∑–∞–∫–∞–∑–∞ {user_input}:*\n{items_list}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(response) > 4096:
            response = response[:4000] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ)"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ '{user_input}': {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='Markdown'
        )

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ BSG –ê–Ω–∞–ª–∏—Ç–∏–∫...")
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registration_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAITING_FOR_FULL_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_full_name_input)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_registration)],
        allow_reentry=True
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(registration_handler)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("packaged_items", packaged_items_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
